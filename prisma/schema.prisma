// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id              String   @id @default(cuid())
  clerkUserId     String   @unique
  email           String   @unique
  name            String?
  imageUrl        String?
  industry        String?
  industryInsight IndustryInsight? @relation(fields:[industry] , references: [industry])  //Combined industry-subindustry(e.g. "texh-software-developmnt")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  //Profile fiels
  bio             String?
  experience      Int?
  skills          String[]

  assessments     Assessment[]
  resumes         Resume?
  coverLetter     CoverLetter[]
  }


  model Assessment {
    id             String   @id @default(cuid())
    userId         String
    user           User     @relation(fields: [userId], references: [id])
    quizScore      Float //Overall quiz score
    questions      Json[]  //array of {question , answer , userAnswer , isCorrect}
    category       String //e.g. "technical", "soft skills", "industry knowledge"
    improvementTip String?  //AI generated tip for improvement
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    @@index([userId])

  }


model Resume {
  id              String   @id @default(cuid())
  userId          String @unique  //one resume per user
  user            User     @relation(fields: [userId], references: [id])
  content         String @db.Text //markdown content
  atsScore       Float? //AI generated ATS score
  feedBack       String? //AI generated feedback
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

}

model CoverLetter {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  content         String  //markdown content
  jobDescription  String? //job description to tailor the cover letter
  jobTitle        String //job title to tailor the cover letter
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])

}

model IndustryInsight {
  id        String   @id @default(cuid())
  industry  String   @unique //Combined industry-subindustry(e.g. "texh-software-developmnt")

  users     User[]   //list of users in this industry

  //Industry trends
  growthRate  Float? //e.g. 5.2% growth rate
  demandLevel DemandLevel //e.g. "high", "medium", "low"
  topSkills   String[] //e.g. ["AI", "Data Science", "Cloud Computing"] most in demand skills

  //Current Market Conditions
  marketOutlook MarketOutlook //e.g. "positive", "neutral", "negative" market condition outlook
  keyTrends      String[] //e.g. ["AI adoption", "Remote work", "Sustainability"] array of curent industry trends

  //learning suggestions'
  recommendedSkills String[] //e.g. ["AI", "Data Science", "Cloud Computing"] skills recommended for this industry

  lastUpdated DateTime @default(now()) //when was this industry insight last updated
  nextUpdate DateTime? //when is the next update scheduled

  @@index([industry])

}

enum DemandLevel{
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
